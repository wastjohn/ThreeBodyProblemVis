import math
import numpy as np
import matplotlib.pyplot as plot


def F(y, t):
    return y + t

def heun_mtd(y0, a, b, N):
    h = (b - a)/float(N-1)
    t = np.arange( a, b+h, h )
    t[0] = 0
    y = np.zeros((N,))
    y[0] = y0
    for i in range(1, N):
        y_temp = y[i-1] + h * F(y[i-1], t[i-1])

        y[i] = y[i-1] + h / 2 * (F(y[i-1], t[i-1]) + F(y_temp, t[i]))

    return y[i]



p0 = []

def derivative(p0):
    dp = 0 ** p0
    dp = np.zeros(12)
    dp[0] = p0[6]
    dp[1] = p0[7]
    de[2] = p0[8]

    dp[11] = p0[0] - p0[1] 






def heun(p0, N, t):
    h = (b - a)/float(N-1)
    t = np.arange( a, b+h, h )

    df = Dataframe

    for i in range(1, N):
        ptemp = 
        p[i] = 
        df2 = Dataframe
        dataframe.append

